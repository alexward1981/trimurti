'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _generateSchema = require('generate-schema');

var _generateSchema2 = _interopRequireDefault(_generateSchema);

var _WriteConfig = require('./WriteConfig');

var _WriteConfig2 = _interopRequireDefault(_WriteConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CreateSchemas = function () {
  function CreateSchemas() {
    _classCallCheck(this, CreateSchemas);
  }

  _createClass(CreateSchemas, [{
    key: 'getJson',
    value: function getJson(route) {
      var t = this;
      // Retrieves a usable json feed from an API (specified in answers array)
      var getURL = route ? t.answers.API + '/' + route : t.answers.API;
      return _axios2.default.get(getURL).then(function (response) {
        console.log(_chalk2.default.green('✔ Json feed found at', t.answers.API + '/' + route, 'processing...'));
        t.processJson(response, route);
      });
    }
  }, {
    key: 'getRoutes',
    value: function getRoutes() {
      var route = this.answers.Routes.split(',');
      if (route.length !== 0) {
        for (var i = 0; i < route.length; i++) {
          console.log(_chalk2.default.gray('Please wait, processing', route[i], 'route ...'));
          this.getJson(route[i]);
        }
      } else {
        this.getJson();
      }
      // TODO: This should not happen until after the loop has finished it's run
      // Send the results to WriteConfig.js
    }
  }, {
    key: 'processJson',
    value: function processJson(feed, route) {
      // Processes each route and outputs a schema file for each route
      // FIXME: GenerateSchema is not working properly, check docs tomorrow
      var schema = _generateSchema2.default.json(route, feed);
      return this.createSchema(schema, route);
    }
  }, {
    key: 'createSchema',
    value: function createSchema(schema, route) {
      // Takes the schema generated by 'processJson()' and writes it to to a file
      var wc = new _WriteConfig2.default();
      wc.generateConfigStream(schema);
      // fs.writeFile('./vulcan/core/routes/'+route+'.json', JSON.stringify(schema, null, 4), 'utf8', function (err) {
      //   if (err) { return console.log(err); }
      // });
      return console.log(_chalk2.default.green('✔ Processing of', route, 'complete'));
    }
  }, {
    key: 'init',
    value: function init(answers) {
      this.answers = answers;
      //this.getJson('https://jsonplaceholder.typicode.com/posts')
      this.getRoutes();
    }
  }]);

  return CreateSchemas;
}();

exports.default = CreateSchemas;